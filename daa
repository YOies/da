--d
repeat wait() until game:IsLoaded()
local args = {
    [1] = "Vote",
    [2] = "Button"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
local args = {
    [1] = "Start",
    [2] = "Button"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
local startTime = tick()
local towerRecord = {}
local httpService = game:GetService("HttpService")
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if method == "InvokeServer" and tostring(self) == "Units" then
        local moneyReq = nil

        for _, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Main.UnitPlacementFrame.Button:GetDescendants()) do
            if v:IsA("TextButton") and v:FindFirstChild(args[1][1]) then
                moneyReq = v.Lvl.Text  -- Assuming Lvl is a child of TextButton v
                break
            end
        end
        towerRecord[#towerRecord + 1] = {
            time = tick() - startTime,
            moneyreq = moneyReq,
            character = args[1][1],  -- Assuming args[1][1] is the character name
            positioncframe = tostring(args[1][2]),  -- Assuming args[1][2] is a CFrame
            positionvector = tostring(args[2]),  -- Assuming args[2] is a Vector3
            type = "CreateUnit"
        }
    elseif method == "InvokeServer" and tostring(self) == "UnitPlacements" then
        if args[1] == "Upgrade" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime,
                ["maxupgrades"] = args[2].Stats.UpgradeNum.Value,
                ["cframe"] = tostring(args[2].HumanoidRootPart.CFrame.Position),
                ["character"] = args[2].Name,
                ["type"] = "UpgradeUnit"
            }
        elseif args[1] == "Sell" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime,
                ["character"] = args[2].Name,
                ["cframe"] = tostring(args[2].HumanoidRootPart.CFrame.Position),
                ["type"] = "SellUnit"
            }
        end
    end
    return oldNamecall(self, ...)
end)
setreadonly(mt, true)
    while task.wait() do 
        writefile("b.txt", httpService:JSONEncode(towerRecord))
    end
